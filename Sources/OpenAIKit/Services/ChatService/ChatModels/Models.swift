//
//  File.swift
//  
//
//  Created by Carlos Cayres on 28/07/23.
//

import Foundation

public struct ChatMessage: Codable {
    
    ///The role of the messages author. One of system, user, assistant, or function.
    public let role: ChatRole
    
    ///The contents of the message. content is required for all messages, and may be null for assistant messages with function calls.
    public let content: String?
    
    ///The name of the author of this message. name is required if role is function, and it should be the name of the function whose response is in the content. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 character
    public let name: String?
    
    //The name and arguments of a function that should be called, as generated by the model.
    public let functionCall: Function?
    
    
    /// Creates a new `ChatMessage` instance.
    ///
    /// - Parameters:
    ///   - role: The role of the author of the message. This must be one of the `ChatRole` options.
    ///   - content: The content of the message. This is required for all messages, but may be `nil` for assistant messages with function calls.
    ///   - functionCall: (Optional) The function that should be called, as generated by the model. This is only required if `role` is set to `function`.
    ///   - name: (Optional) The name of the author of the message. This is only required if `role` is set to `function`, and it should be the name of the function whose response is in `content`. The name can contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    public init(role: ChatRole,
                content: String?,
                functionCall: Function? = nil,
                name: String? = nil) {
        
        self.role = role
        self.content = content
        self.name = name
        self.functionCall = functionCall
    }
    
    enum CodingKeys: String, CodingKey {
        case role = "role"
        case content = "content"
        case name = "name"
        case functionCall = "function_call"
    }
}

public struct ChatInput: Encodable {
    
    ///ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.
    let model: String
    
    ///A list of messages comprising the conversation so far
    let messages: [ChatMessage]
    
    ///A list of functions the model may generate JSON inputs for.
    let functions: [ChatFunctionInput]?
    
    
    ///What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
    ///We generally recommend altering this or top_p but not both.
    let temperature: Double?
    
    ///An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    ///We generally recommend altering this or temperature but not both.
    let topProbabilityMass: Double?
    
    
    ///How many chat completion choices to generate for each input message.
    let choices: Int?
    
    ///Up to 4 sequences where the API will stop generating further tokens.
    let stop: [String]?
    
    ///The maximum number of tokens to generate in the chat completion.
    ///The total length of input tokens and generated tokens is limited by the model's context length.
    let maxTokens: Int?
    
    ///Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
    let presencePenalty: Double?
    
    ///Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
    let frequencyPenalty: Double?
    
    ///Modify the likelihood of specified tokens appearing in the completion.
    ///Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100.
    ///Mathematically, the bias is added to the logits generated by the model prior to sampling.
    ///The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    let logitBias: [Int: Double]?
    
    //A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    let user: String?
    
    
    enum CodingKeys: String, CodingKey {
        
        case user
        case messages
        case model
        case temperature
        case topProbabilityMass = "top_p"
        case choices = "n"
        case stop
        case maxTokens = "max_tokens"
        case presencePenalty = "presence_penalty"
        case frequencyPenalty = "frequency_penalty"
        case logitBias = "logit_bias"
        case functions
    }
}
